apiVersion: apps/v1
kind: Deployment
metadata:
  name: hasher-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hasher
      app: dockercoins
  template:
    metadata:
      labels:
        app: hasher
        app: dockercoins
    spec:
      containers:
        -
          args:
            - hasher.rb
          command:
            - ruby
          image: celsohernando/hasher:latest
          name: hasher-container
          ports: 
            - 
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            -
              mountPath: /hasher/hasher.rb
              name: hasher-volume
              readOnly: true
              subPath: hasher.rb
          workingDir: /hasher/   
      volumes:
        -
          secret:
            defaultMode: 0400
            items:
              -
                key: hasher.rb
                mode: 0400
                path: hasher.rb
            secretName: hasher-secret
          name: hasher-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      app: dockercoins
  template:
    metadata:
      labels:
        app: redis
        app: dockercoins
    spec:
      containers:
        -
          args:
            - redis-server
          command:
            - docker-entrypoint.sh
          image: celsohernando/redis:latest
          name: redis-container
          ports: 
            - 
              containerPort: 6379
              protocol: TCP
          volumeMounts:
            -
              mountPath: /data/
              name: redis-volume
              readOnly: false
          workingDir: /data/   
      volumes:
        -
          emptyDir:
            medium: Memory
            sizeLimit: 100Mi
          name: redis-volume
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: rng-ds
spec:
  selector:
    matchLabels:
      app: rng
      app: dockercoins
  template:
    metadata:
      labels:
        app: rng
        app: dockercoins
    spec:
      containers:
        -
          args:
            - rng.py
          command:
            - python
          image: celsohernando/rng:latest
          name: rng-container
          ports: 
            - 
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            -
              mountPath: /rng/rng.py
              name: rng-volume
              readOnly: true
              subPath: rng.py
          workingDir: /rng/   
      volumes:
        -
          secret:
            defaultMode: 0400
            items:
              -
                key: rng.py
                mode: 0400
                path: rng.py
            secretName: rng-secret
          name: rng-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webui-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webui
      app: dockercoins
  template:
    metadata:
      labels:
        app: webui
        app: dockercoins
    spec:
      containers:
        -
          args:
            - webui.js
          command:
            - node
          image: celsohernando/webui:latest
          name: webui-container
          ports: 
            - 
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            -
              mountPath: /dockercoins/
              name: webui-volume
              readOnly: true
          workingDir: /dockercoins/webui/   
      initContainers:
        -
          args:
            - clone
            - https://github.com/celsohernando/dockercoins
            - --branch
            - 2021-12-ibm
            - --single-branch
            - /dockercoins/
          image: celsohernando/git:latest
          name: webui-init-container
          volumeMounts:
            -
              mountPath: /dockercoins/
              name: webui-volume
              readOnly: false
          workingDir: /dockercoins/   
      volumes:
        -
          persistentVolumeClaim:
            claimName: webui-pvc
            readOnly: false
          name: webui-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: worker
      app: dockercoins
  template:
    metadata:
      labels:
        app: worker
        app: dockercoins
    spec:
      containers:
        -
          args:
            - worker.py
          command:
            - python
          image: celsohernando/worker:latest
          name: worker-container
          volumeMounts:
            -
              mountPath: /worker/worker.py
              name: worker-volume
              readOnly: true
              subPath: worker.py
          workingDir: /worker/   
      volumes:
        -
          secret:
            defaultMode: 0400
            items:
              -
                key: worker.py
                mode: 0400
                path: worker.py
            secretName: worker-secret
          name: worker-volume
---
apiVersion: v1
kind: Service
metadata:
  name: hasher
spec:
  ports:
    -
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: hasher
    app: dockercoins
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    -
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
    app: dockercoins
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: rng
spec:
  ports:
    -
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: rng
    app: dockercoins
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: webui
spec:
  ports:
    -
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: webui
    app: dockercoins
  type: ClusterIP
---
apiVersion: v1
kind: Secret
immutable: true
metadata:
  name: hasher-secret
stringData:
  hasher.rb: |
    require 'digest'
    require 'sinatra'
    require 'socket'

    set :bind, '0.0.0.0'
    set :port, 8080

    post '/' do
        # Simulate a bit of delay
        sleep 0.1
        content_type 'text/plain'
        "#{Digest::SHA2.new().update(request.body.read)}"
    end

    get '/' do
        "HASHER running on #{Socket.gethostname}\n"
    end
type: Opaque
---
apiVersion: v1
kind: Secret
immutable: true
metadata:
  name: rng-secret
stringData:
  rng.py: |
    from flask import Flask, Response
    import os
    import socket
    import time

    app = Flask(__name__)

    # Enable debugging if the DEBUG environment variable is set and starts with Y
    app.debug = os.environ.get("DEBUG", "").lower().startswith('y')

    hostname = socket.gethostname()

    urandom = os.open("/dev/urandom", os.O_RDONLY)


    @app.route("/")
    def index():
        return "RNG running on {}\n".format(hostname)


    @app.route("/<int:how_many_bytes>")
    def rng(how_many_bytes):
        # Simulate a little bit of delay
        time.sleep(0.1)
        return Response(
            os.read(urandom, how_many_bytes),
            content_type="application/octet-stream")


    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=8080)

type: Opaque
---
apiVersion: v1
kind: Secret
immutable: true
metadata:
  name: worker-secret
stringData:
  worker.py: |
    import logging
    import os
    from redis import Redis
    import requests
    import time

    DEBUG = os.environ.get("DEBUG", "").lower().startswith("y")

    log = logging.getLogger(__name__)
    if DEBUG:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
        logging.getLogger("requests").setLevel(logging.WARNING)


    redis = Redis("redis")


    def get_random_bytes():
        r = requests.get("http://rng/32")
        return r.content


    def hash_bytes(data):
        r = requests.post("http://hasher/",
                          data=data,
                          headers={"Content-Type": "application/octet-stream"})
        hex_hash = r.text
        return hex_hash


    def work_loop(interval=1):
        deadline = 0
        loops_done = 0
        while True:
            if time.time() > deadline:
                log.info("{} units of work done, updating hash counter"
                         .format(loops_done))
                redis.incrby("hashes", loops_done)
                loops_done = 0
                deadline = time.time() + interval
            work_once()
            loops_done += 1


    def work_once():
        log.debug("Doing one unit of work")
        time.sleep(0.1)
        random_bytes = get_random_bytes()
        hex_hash = hash_bytes(random_bytes)
        if not hex_hash.startswith('0'):
            log.debug("No coin found")
            return
        log.info("Coin found: {}...".format(hex_hash[:8]))
        created = redis.hset("wallet", hex_hash, random_bytes)
        if not created:
            log.info("We already had that coin")


    if __name__ == "__main__":
        while True:
            try:
                work_loop()
            except:
                log.exception("In work loop:")
                log.error("Waiting 10s and restarting.")
                time.sleep(10)

type: Opaque
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webui-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    limits:
      storage: 1Gi
    requests:
      storage: 1Gi
  storageClassName: ocs-storagecluster-cephfs
  volumeMode: Filesystem
  



